usage: firesim [-h] [--helpfull] [--platform PLATFORM]
               {managerinit,infrasetup,boot,kill,runworkload,buildbitstream,builddriver,enumeratefpgas,tar2afi,runcheck,launchrunfarm,terminaterunfarm,shareagfi}

FireSim Simulation Manager.

positional arguments:
  {managerinit,infrasetup,boot,kill,runworkload,buildbitstream,builddriver,enumeratefpgas,tar2afi,runcheck,launchrunfarm,terminaterunfarm,shareagfi}
                        Management task to run.

options:
  -h, --help            show this help message and exit
  --helpfull            show full help message and exit
  --platform PLATFORM   <xilinx_alveo_u250|xilinx_alveo_u200|rhsresearch_nitef
                        ury_ii|xilinx_alveo_u280|xilinx_vcu118|f1>:
                        Required argument for "managerinit" to specify which
                        platform you will be using

absl.app:
  --[no]only_check_args: Set to true to validate args and exit.
    (default: 'false')
  --[no]pdb: Alias for --pdb_post_mortem.
    (default: 'false')
  --[no]pdb_post_mortem: Set to true to handle uncaught exceptions with PDB post
    mortem.
    (default: 'false')
  --profile_file: Dump profile information to a file (for python -m pstats).
    Implies --run_with_profiling.
  --[no]run_with_pdb: Set to true for PDB debug mode
    (default: 'false')
  --[no]run_with_profiling: Set to true for profiling the script. Execution will
    be slower, and the output format might change over time.
    (default: 'false')
  --[no]use_cprofile_for_profiling: Use cProfile instead of the profile module
    for profiling. This has no effect unless --run_with_profiling is set.
    (default: 'true')

absl.logging:
  --[no]alsologtostderr: also log to stderr?
    (default: 'false')
  --log_dir: directory to write logfiles into
    (default: '')
  --logger_levels: Specify log level of loggers. The format is a CSV list of
    `name:level`. Where `name` is the logger name used with
    `logging.getLogger()`, and `level` is a level name  (INFO, DEBUG, etc). e.g.
    `myapp.foo:INFO,other.logger:DEBUG`
    (default: '')
  --[no]logtostderr: Should only log to stderr?
    (default: 'false')
  --[no]showprefixforinfo: If False, do not prepend prefix to info messages when
    it's logged to stderr, --verbosity is set to INFO level, and python logging
    is used.
    (default: 'true')
  --stderrthreshold: log messages at this level, or more severe, to stderr in
    addition to the logfile.  Possible values are 'debug', 'info', 'warning',
    'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr
    cancels the effect of this flag. Please also note that this flag is subject
    to --verbosity and requires logfile not be stderr.
    (default: 'fatal')
  -v,--verbosity: Logging verbosity level. Messages logged at this level or
    lower will be included. Set to 1 for debug logging. If the flag was not set
    or supplied, the value will be changed from the default of -1 (warning) to 0
    (info) after flags are parsed.
    (default: '-1')
    (an integer)

buildtools.buildconfigfile:
  --buildconfigfile: Optional custom build config file.
    (default: 'config_build.yaml')
  --buildfarmconfigfile: Optional custom build farm config file.
    (default: 'config_build_farm.yaml')
  --buildrecipesconfigfile: Optional custom build recipe config file.
    (default: 'config_build_recipes.yaml')
  --[no]forceterminate: For terminaterunfarm and buildbitstream, force
    termination without prompting user for confirmation.
    (default: 'false')
  --launchtime: Give the "Y-m-d--H-M-S" prefix of results-build directory.
    Useful for tar2afi when finishing a partial buildafi

runtools.runtime_config:
  --hwdbconfigfile: Optional custom HW database config file.
    (default: 'config_hwdb.yaml')
  --overrideconfigdata: Override a single value from one of the the RUNTIME
    e.g.: --overrideconfigdata "target-config link-latency 6405".
    (default: '')
  --runtimeconfigfile: Optional custom runtime/workload config file.
    (default: 'config_runtime.yaml')
  --terminatesome: Only used by terminaterunfarm. Used to specify a restriction
    on how many instances to terminate. E.g., --terminatesome=f1.2xlarge:2 will
    terminate only 2 of the f1.2xlarge instances in the runfarm, regardless of
    what other instances are in the runfarm. This argument can be specified
    multiple times to terminate additional instance types/counts. Behavior when
    specifying the same instance type multiple times is undefined. This replaces
    the old --terminatesome{f116,f12,f14,m416} arguments. Behavior when
    specifying these old-style terminatesome flags and this new style flag at
    the same time is also undefined.;
    repeat this option to specify a list of values
    (default: '[]')
  --terminatesomef116: DEPRECATED. Use --terminatesome=f1.16xlarge:count
    instead. Will be removed in the next major version of FireSim (1.15.X). Old
    help message: Only used by terminaterunfarm. Terminates this many of the
    previously launched f1.16xlarges.
    (default: '-1')
    (an integer)
  --terminatesomef12: DEPRECATED. Use --terminatesome=f1.2xlarge:count instead.
    Will be removed in the next major version of FireSim (1.15.X). Old help
    message: Only used by terminaterunfarm. Terminates this many of the
    previously launched f1.2xlarges.
    (default: '-1')
    (an integer)
  --terminatesomef14: DEPRECATED. Use --terminatesome=f1.4xlarge:count instead.
    Will be removed in the next major version of FireSim (1.15.X). Old help
    message: Only used by terminaterunfarm. Terminates this many of the
    previously launched f1.4xlarges.
    (default: '-1')
    (an integer)
  --terminatesomem416: DEPRECATED. Use --terminatesome=m4.16xlarge:count
    instead. Will be removed in the next major version of FireSim (1.15.X). Old
    help message: Only used by terminaterunfarm. Terminates this many of the
    previously launched m4.16xlarges.
    (default: '-1')
    (an integer)

absl.flags:
  --flagfile: Insert flag definitions from the given file into the command line.
    (default: '')
  --undefok: comma-separated list of flag names that it is okay to specify on
    the command line even if the program does not define a flag with that name.
    IMPORTANT: flags in this list that have arguments MUST use the --flag=value
    format.
    (default: '')
